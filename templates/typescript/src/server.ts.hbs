import dotenv from "dotenv";
import express, { Application, Request, Response } from "express";
import compression from "compression";
import cors from "cors";
import path from "path";
import fs from "fs";
import { fileURLToPath, pathToFileURL } from "url";
import { logger } from "./utils/logger";

dotenv.config();
const app: Application = express();
const PORT = process.env.PORT || 8000;

// __dirname for ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Core middlewares
app.set("trust proxy", 1);
app.use(cors({ origin: true, credentials: true }));
app.use(express.json());
app.use(
  compression({
    threshold: 1024,
    filter: (req, res) => {
      if (req.headers["x-no-compression"]) return false;
      req.headers["accept-encoding"] = "gzip";
      return compression.filter(req, res);
    },
  })
);

// Flat route loader
async function loadRoutesFlat() {
  const routesDir = path.join(__dirname, "routes");
  if (!fs.existsSync(routesDir)) {
    logger.warn("⚠️  No routes folder found at");
    return;
  }

  const routeFiles = fs.readdirSync(routesDir).filter((f) =>
    f.endsWith("{{#if isTypeScript}}.ts{{else}}.js{{/if}}")
  );

  for (const file of routeFiles) {
    try {
      const filePath = path.join(routesDir, file);
      const mod = await import(pathToFileURL(filePath).href);
      const router = mod.default;

      if (typeof router !== "function") {
        logger.warn(`⚠️ Skipped ${file} (no default export router)`);
        continue;
      }

      app.use("/api/v1", router);
      logger.info(`✅ Mounted routes from ${file} at /api/v1`);
    } catch (err) {
      logger.error(`❌ Error loading ${file}`;
    }
  }

  app.use((req: Request, res: Response) => {
    res.status(404).json({ message: "Not Found", url: req.originalUrl });
  });

  app.use((_err: Error, _req: Request, res: Response) => {
    logger.error("💥 Internal Server Error:");
    res.status(500).json({ message: "Something broke!", status: 500 });
  });
}

loadRoutesFlat().then(() => {
  app.listen(PORT, () => {
    logger.info(`🚀 Server running at http://localhost:${PORT}`);
  });
});
